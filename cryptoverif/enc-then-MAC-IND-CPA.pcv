(* WARNING: This file uses the so-called "channel" front-end syntax,
   which is not the one presented in the tutorial. 
   The file presented in the tutorial is enc-then-MAC-IND-CPA.ocv.
   
   The syntax used in this file is meant to be compatible with ProVerif.

Encrypt-then-MAC is IND-CPA *)

param n.

type mkey [bounded].
type key [fixed].
type macs [bounded].

(* Shared-key encryption (CPA Stream cipher) *)

proba Penc.

expand IND_CPA_sym_enc(key, bitstring, bitstring, enc, dec, injbot, Z, Penc).

(* Mac *)

proba Pmac.

expand SUF_CMA_proba_mac(mkey, bitstring, macs, mac, verify, Pmac).

(* Queries *)

query secret b.

fun concat(bitstring, macs): bitstring [data].

letfun full_enc(m: bitstring, k: key, mk: mkey) =
  c1 <- enc(m,k);
  concat(c1,mac(c1,mk)).

channel cEnc, start, c.

let QencLR(b0: bool, k: key, mk: mkey) = 
    	! i <= n
	in(cEnc, (m1: bitstring, m2: bitstring));
	if Z(m1) = Z(m2) then (* m1 and m2 have the same length *)
	let m0 = if b0 then m1 else m2 in
	out(cEnc, full_enc(m0,k,mk)).

process 
	in(start, ());
	new b: bool;
	new k: key;
	new mk: mkey;
	out(c, ());
	QencLR(b, k,mk)
